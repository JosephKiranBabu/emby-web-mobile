!function(){var C=CryptoJS,C_lib=C.lib,Base=C_lib.Base,WordArray=C_lib.WordArray,C_algo=C.algo,SHA1=C_algo.SHA1,HMAC=C_algo.HMAC,PBKDF2=C_algo.PBKDF2=Base.extend({cfg:Base.extend({keySize:4,hasher:SHA1,iterations:1}),init:function(cfg){this.cfg=this.cfg.extend(cfg)},compute:function(password,salt){for(var cfg=this.cfg,hmac=HMAC.create(cfg.hasher,password),derivedKey=WordArray.create(),blockIndex=WordArray.create([1]),derivedKeyWords=derivedKey.words,blockIndexWords=blockIndex.words,keySize=cfg.keySize,iterations=cfg.iterations;derivedKeyWords.length<keySize;){var block=hmac.update(salt).finalize(blockIndex);hmac.reset();for(var blockWords=block.words,blockWordsLength=blockWords.length,intermediate=block,i=1;i<iterations;i++){intermediate=hmac.finalize(intermediate),hmac.reset();for(var intermediateWords=intermediate.words,j=0;j<blockWordsLength;j++)blockWords[j]^=intermediateWords[j]}derivedKey.concat(block),blockIndexWords[0]++}return derivedKey.sigBytes=4*keySize,derivedKey}});C.PBKDF2=function(password,salt,cfg){return PBKDF2.create(cfg).compute(password,salt)}}();